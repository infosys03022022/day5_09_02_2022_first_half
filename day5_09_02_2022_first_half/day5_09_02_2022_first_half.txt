1) github ---> getting code from github for your understanding of
              the concepts as in this codes are shared.
2) lex -------> 
3) Jdk and Eclipse ------->



* In a java file we cannot have 2 public classes. The public class
name and java file name should be same. 
  
So we cannot have two public classes as below. It will give compilation error.
  
  public class Customer {}
  public class Tester()

Why compilation error?
Error because multiple public classes and which name we need to give is it Customer or Tester?
// keywords in smallcase
// class name starts with Uppercase
// method name should be in smallcase

class Food {

      String foodName;
 
     }
}
---------------------------------------------------------------------
A constructor in Java is a special method that is used to initialize class variables at the time of object creation. 

When the object gets created?
   When we write
 
package infosys.demo.constructordemo1;
 
  public class Employee{
    private int id;
    private String name;

    public void setId(int i){
     id=i;
    }

    public int getId(){
     return id;
    }

    public void setName(String nm){
     name=nm;
    }
    public String getName(){
    return name;
     }   

  }
------------------------------------------------------------------------------------------
package infosys.demo.constructordemo1;
 
    public class EmployeeMain{
     public static void main(String args[]){
     Employee emp=new Employee(); 
     System.out.println(emp.getId());
     System.out.println(emp.getName());
    }
   }   

// Output is 0 and null because of the default constructor provided during the compilation of the code.
// We can write our own parameterized and parameterless constructor.

package infosys.demo.constructordemo2;
 
  public class Employee{
    private int id;
    private String name;

    public Employee(){
      id=1;
      name="Infosys";
     }
    public void setId(int i){
     id=i;
    }

    public int getId(){
     return id;
    }

    public void setName(String nm){
     name=nm;
    }
    public String getName(){
    return name;
     }   

  }


package infosys.demo.constructordemo2;
 
    public class EmployeeMain{
     public static void main(String args[]){
     Employee emp=new Employee(); // constructor call is implicit  
     System.out.println(emp.getId());  // other methods are explicitly called
     System.out.println(emp.getName());
    }
   }
----------------------------------------------------------
What is the drawback of the parameterless constructor?


package infosys.demo.constructordemo3;
 
  public class Employee{
    private int id;
    private String name;

    public Employee(int i, String n){
      id=i;
      name=n;
     }
    public void setId(int i){
     id=i;
    }

    public int getId(){
     return id;
    }

    public void setName(String nm){
     name=nm;
    }
    public String getName(){
    return name;
     }   

  }


package infosys.demo.constructordemo3;
 
    public class EmployeeMain{
     public static void main(String args[]){
     Employee emp=new Employee(1,"Infosys"); // constructor call is implicit  
     System.out.println(emp.getId());  // other methods are explicitly called
     System.out.println(emp.getName());
       Employee emp2=new Employee(2,"Xyz"); // constructor call is implicit  
     System.out.println(emp2.getId());  // other methods are explicitly called
     System.out.println(emp2.getName());
    }
   }
---------------------------------------------------------------------------------------------------------------------
// Observation is both instance variable name and the local variable/parameter names are same.
public Customer(String customerId, String customerName, long contactNumber,
		String address) {
	customerId = customerId;
	customerName = customerName;
	contactNumber = contactNumber;
	address = address;
}
--------------------------------------------------------------------------------------------------------------------
Q Will it make a difference?
A: Yes

So we wont be getting the expected output.


Q Than what is the solution?
  We can make use of this keyword.
---------------------------------------------------------------------------------------------
Three techniques for storing the values:
1) parameterless constructor
2) parameterized constructor
3) setter
--------------------------------------------------------------------
One object can be referenced by multiple reference variables at any given point of time.
* I have created 4 reference variables namely customer, customerBackup1, customerBackup2, customerBackup3.
* customer reference is storing the address of newly created object.   
Customer customer=new Customer(); 
   Customer customerBackup1;
   Customer customerBackup2;
   Customer customerBackup3;
  // Customer customerBackup1=new Customer();
  // The above line will create a new Customer object and our purpose is solved.
  customerBackup1=customer;
  customerBackup2=customer;
  customerBackup3=customer;
-----------------------------------------------------------------------------------------------
1. Customer customer=new Customer(); 
2. customer=new Customer();

int num1=10;
int num1=20;
The above is incorrect because in the same scope we have declared two variable with the same name.

int num1=10;
num1=20;


Observation:=
* Two objects are created.
* 1 in line 1 and 2nd in line2.
* So suppose the address of object created in line1 is 1234.
* and let the address of the  object created in line2 is 2345;
* In line1 customer reference variable is having the address 1234.
* In line2 customer reference variable is assigned with the adderess 2345 and now customer reference is pointing to
the new object/location and currently it is not pointing to the object which is in the location 1234.
* The object which was created in line1 is eligible for garbage collection or freeing up of memory.
* Because my program no longer is holding the address of 1234 which is the address of the object created in line1.

--------------------------------------------------------------------------------------------------------------------------------- 

1. Customer customer=new Customer(); 
2. Customer customerBackup=customer;
3. customer=new Customer();
// Now customerBackup is storing 1234. and the customer reference in line3 is storing 2345.
So as my code is currently holding the address of object which got created in line in a reference customerBackup so the
object created in line is not eligible garbage collection.
So we can access access the content stored for object created in line through customerBackup.
------------------------------------------------------------------------------------------------------------------

